/*
 Oświetlenie modelu RC typu Quad/Hexacopter dla modułu NLM2
 Program steruje układem diod LED 
 w oparciu o sygnały z Ardupilot APM 2.6 v3.1 i v3.2
 
 Program przeznaczony dla Arduino, udostępniany jest na licencji OpenSource.
 @autor: warp3r[at]wp.pl
 @date 2015
 @version 2.3.1
 */

/*
WYJŚCIA
 ----------------------------------------------------------------
 LED  1 - ZIELONY  - PRAWE RAMIE - ŚWIATŁO OBRYSOWE
 LED  2 - CZERWONY - LEWE RAMIE  - ŚWIATŁO OBRYSOWE
 LED  3 - ŚWIATŁO DO GPS obwód 1 
 LED  4 - ŚWIATŁO DO GPS obwód 2 (lub zworka)
 LED  5 - CZERWONY - BEACON SPÓD
 LED  6 - CZERWONY - BEACON GÓRA (lub zworka)
 LED  7 - BIAŁY - OGON/TYŁ GIMBALA - ŚWIATŁO OBRYSOWE
 LED  8 - (zworka)
 LED  9 - BIAŁY - PRAWE RAMIE - ŚWIATŁO ANTYKOLIZYJNE
 LED 10 - BIAŁY - LEWE RAMIE  - ŚWIATŁO ANTYKOLIZYJNE
 
 WEJŚCIA
 ----------------------------------------------------------------
 CONN 1 - nie używane
 CONN 2 - sygnał ze złącza A6 APM2 dla GPS
 CONN 3 - sygnał ze złącza A7 APM2 dla trybów oświetlenia 
 CONN 4 - nie używane
 CONN 5 - nie używane
 */

/* dla ATTiny 44 */

// LED 10
//  funkcja:  światła antykolizyjne BIAŁE stroboskopowe na obu ramionach skierowane w bok i tył
int led_10 = 7; // PIN 10 - LED 10
int max_FS = 5; // podawane w sekundach

// LED 9
// funkcja: światła antykolizyjne BIAŁE stroboskopowe na obu ramionach skierowane w bok i tył
int led_09 = 6; // PIN 9 - LED 9
boolean led_gear;

// LED 7-8
// funkcja: światło antykolilzyjne obrysowe BIAŁE
// tylna część skadłuba lub gimbala
// jeśli używane będzie jedno złącze, w drugie należy włożyć zworkę
int led_78 = 5; // PIN 8 - LED 7-8  PWM

// LED 5-6
// funkcja: BEACON światło sygnalizujące pracę silnika, góra i spód kadłuba lub gimbala
//  zmienna led_beacon informuje czy zostały załączone silniki
int led_56 = 4; // PIN 7 - LED 5-6  PWM
boolean led_beacon;

// LED 3-4
// funkcja: 
int led_34 = 3; // PIN 6 - LED 3-4  PWM

// LED 1-2
// funkcja:  światła obrysowe, ZIELONE I CZERWONE na ramionach, skierowane bok 
int led_12 = 2; // PIN 5 - LED 1-2  PWM

// CONN 1, Wejście sygnału S1  
int input_Signal1 = 8; // PIN 11

// CONN 2, Wejście sygnału S2  -  APM2 złącze A6
// funkcja:  załączanie świateł do lądowania
//  zsynchronizowane z kanałem RC odpowiedzialnym za wypuszczanie podwozia
int input_Signal2 = 10; // PIN 13

// CONN 3, Wejście sygnału S3  -  APM2 złącze A7
// funkcja:  załączanie świateł antykolizyjnych po uzbrojeniu silników
int input_Signal3 = 9; // PIN 12
int inTrh_Signal = 1100;


// CONN 4, Wejście sygnału S4
//  dodatkowe złącze We/Wy
int input_Signal4 = 10; // PIN 2

// CONN 5, Wejście sygnału S5
//  dodatkowe złącze We/Wy
int input_Signal5 = 9; // PIN 3

/* Stan PWM dla diod, więcej o PWM http://arduino.cc/en/Tutorial/PWM */
// wartość dla wyłączonej diody
const int LEDOFF = 0;
// wartość wypełnienia PWM dla diody "przygaszonej"
const int LEDON = 64; // 25%
// wartość wypełnienia PWM dla pełnego oświetlenia
const int LEDBLINK = 192;  // 100%

boolean led_lights = false;

/* pomocnicze */
int input_SignalArming = input_Signal3;
int input_Signal1State = 0;
int input_SignalArmingState = 0;
boolean goArmingState = false;
boolean wait_state = true;
unsigned long durationS1;
unsigned long durationS2;
unsigned long durationS3;
int counterFS = 0;

// Ustawienia po uruchomieniu układu
void setup() {
  // ustawiamy stan IO, internal pull
  pinMode(led_12, OUTPUT);     
  pinMode(led_34, OUTPUT);     
  pinMode(led_56, OUTPUT);     
  pinMode(led_78, OUTPUT);     
  pinMode(led_09, OUTPUT);     
  pinMode(led_10, OUTPUT);     
  pinMode(input_Signal1, INPUT); 
  pinMode(input_Signal2, INPUT); 
  pinMode(input_Signal3, INPUT); 
  pinMode(input_Signal4, INPUT); 
  pinMode(input_Signal5, INPUT); 
  digitalWrite(input_Signal1, LOW);  
  digitalWrite(input_Signal2, LOW);  
  digitalWrite(input_Signal3, LOW);  
  digitalWrite(input_Signal4, LOW);  
  digitalWrite(input_Signal5, LOW);  
  counterFS = 0;
  led_lights = false;
  led_beacon = false; 
  led_gear = false;
}

/* Wyłączenie wszystkich świateł */
void LEDS_OFF() {
  analogWrite(led_12, LEDOFF);
//  analogWrite(led_34, LEDOFF);  
  analogWrite(led_56, LEDOFF);
  analogWrite(led_78, LEDOFF);
  analogWrite(led_09, LEDOFF);
  analogWrite(led_10, LEDOFF);
}

/* Włączenie wszystkich świateł */
void LEDS_ON() {
  analogWrite(led_12, LEDBLINK);
//  analogWrite(led_34, LEDBLINK);  
  analogWrite(led_56, LEDBLINK);
  analogWrite(led_78, LEDBLINK);
  analogWrite(led_09, LEDBLINK);
  analogWrite(led_10, LEDBLINK);
}

/* Aktywacja wyłącznie świateł obrysowych - tylko pozycyjne */
void LEDS_Mode1() {
  if (led_lights != true) { LEDS_OFF(); return;}
  analogWrite(led_12, LEDON); // włączone obrysowe 
  analogWrite(led_09, LEDOFF);  
  analogWrite(led_10, LEDOFF);  
  analogWrite(led_56, LEDOFF); 
  analogWrite(led_78, LEDON);// tylne antykolizyjne  

  if (led_beacon !=false) {
    analogWrite(led_56, LEDBLINK);
    delay(50);
    analogWrite(led_56, LEDOFF);
    delay(50);
    analogWrite(led_56, LEDBLINK);
    delay(50);
    analogWrite(led_56, LEDOFF);
    delay(50);  
    analogWrite(led_56, LEDBLINK);
    delay(50);
    analogWrite(led_56, LEDOFF);
    delay(700);
  }
}

/* Aktywacja pełnego cyklu oświetlenia */
void LEDS_Mode2() {
  if (led_lights != true) { LEDS_OFF(); return;}
  analogWrite(led_09, LEDBLINK); analogWrite(led_10, LEDBLINK); 
  analogWrite(led_78, LEDBLINK);
  delay(50);
  analogWrite(led_09, LEDOFF);   analogWrite(led_10, LEDOFF); 
  analogWrite(led_78, LEDOFF);
  delay(50);
  analogWrite(led_12, LEDBLINK);
  analogWrite(led_09, LEDBLINK); analogWrite(led_10, LEDBLINK); 
  analogWrite(led_78, LEDBLINK);
  delay(50);
  analogWrite(led_12, LEDOFF);
  analogWrite(led_09, LEDOFF);   analogWrite(led_10, LEDOFF); 
  analogWrite(led_78, LEDOFF);
  delay(50);
  analogWrite(led_12, LEDBLINK);
  analogWrite(led_78, LEDBLINK);
  delay(50);
  analogWrite(led_12, LEDOFF);
  analogWrite(led_78, LEDON);
  delay(50);
  analogWrite(led_12, LEDBLINK);
  delay(50);
  analogWrite(led_12, LEDON);
  delay(50);
  analogWrite(led_09, LEDBLINK); analogWrite(led_10, LEDBLINK);
  delay(50);
  analogWrite(led_09, LEDOFF);   analogWrite(led_10, LEDOFF); 
  // 400 ms
  if (led_beacon !=false) analogWrite(led_56, LEDBLINK);
  delay(50);
  analogWrite(led_56, LEDOFF);
  delay(50);
  if (led_beacon !=false) analogWrite(led_56, LEDBLINK);
  delay(50);
  analogWrite(led_56, LEDOFF);
  delay(50);  
  if (led_beacon !=false) analogWrite(led_56, LEDBLINK);
  delay(50);
  analogWrite(led_56, LEDOFF);
  CheckA7();
  delay(300);
  // 1000 ms
}

void CheckA7(){
  if (led_lights !=true) {LEDS_OFF(); return;}
  goArmingState = true;
 // wait_state = false;
  input_SignalArmingState = digitalRead(input_SignalArming);
  delay(1);        // delay in between reads for stability
  if ((input_SignalArmingState != HIGH)and(wait_state != true)) {
    wait_state = true; 
    goArmingState = false;
    //LEDS_Mode1();  
  } 
  led_beacon = goArmingState;
}

/* w tej pętli, program wykonuje się w nieskończoność */
void loop() {
  //counterFS=0;
  // oczekiwanie na sygnał z wyjścia A7 Ardupilot APM 2.6
  // pomijany jest sygnał BLINK 500ms
  led_lights = true;
  if ((counterFS < 1)and (led_lights !=false)) {
    CheckA7(); 
    if (wait_state != false) {
      wait_state = false;
      goArmingState = true;
      for (int i=0; i<11; i++) {
        input_SignalArmingState = digitalRead(input_SignalArming);
        delay(1);        // delay in between reads for stability
        if (input_SignalArmingState != HIGH) { goArmingState = false; wait_state = true; break;}
        delay(120);
      }
    }
  }
  led_beacon =  ( goArmingState != false) ? true : false;
  if (led_lights !=false) {
    if ( goArmingState != false) {
      LEDS_Mode2();
    } else {
      LEDS_Mode1();
    }
  } else { LEDS_OFF();}
  
  int gpsState = ( digitalRead(input_Signal2) != HIGH ) ? LEDOFF : LEDBLINK;
  analogWrite(led_34, gpsState); 

  led_beacon =  ( goArmingState != false) ? true : false;
  /**/
}
/* a tu jest koniec kodu v2.3.1 */


