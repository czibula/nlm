/*
  Oświetlenie modelu RC typu Cesna 2CH v4 dla modułu 2.x
  Program steruje układem diod LED 
  w oparciu o sygnały z aparatury RC
 
  Program przeznaczony dla Arduino, udostępniany jest na licencji OpenSource.
  @autor: warp3r[at]wp.pl
  @date 2015
  @version 2.0.2.8

  Copyright (c) 2014, Andrzej Donczew
  All rights reserved.
  Redistribution and use in source and binary forms, with or without modification, are permitted provided 
  that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
     in the documentation and/or other materials provided with the distribution.
  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse 
     or promote products derived from this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
  OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
CONN-1 do odbiornika RC, kanał sterowany przełącznikiem trójpozycyjnym
CONN-2 do odbiornika RC, kanałsterowany przełącznikiem dwupozycyjnym, 
       lub połączenie kablem Y z kanałem sterowania Throttle
CONN 3 - nie używane
CONN 4 - nie używane
CONN 5 - nie używane

LED-1 [przewody: biały-zielony     ] {kolor led: CZERWONY } (światło obrysowe      : prawe skrzydło      )
LED-2 [przewody: żółty-czerwony    ] {kolor led: ZIELONY  } (światło obrysowe      : lewe skrzydło       )
LED-3 [przewody: biały-czarny      ] {kolor led: BIAŁY    } (światło antykolizyjne : prawe skrzydło      )
LED-4 [przewody: biały-czarny      ] {kolor led: BIAŁY    } (światło antykolizyjne : lewe skrzydło       )
LED-5 [przewody: niebieski-czerwony] {kolor led: CZERWONY } (światło antykolizyjne : ogon lub kadłub góra)
LED-6 [przewody: niebieski-czerwony] {kolor led: CZERWONY } (światło antykolizyjne : kadłub spód         )
LED-7 [przewody: niebieski-czarny  ] {kolor led: BIAŁY    } (światło lądowania     :                     )
LED-8 [przewody: niebieski-czarny  ] {kolor led: BIAŁY    } (światło lądowania     :                     )
LED-9 [przewody: brązowy-zielony   ] {kolor led: BIAŁY    } (światło obrysowe      : ogon                )
LED-10[                            ] {                    } (failsafe              : buzzer              )

*/

int durationS1min = 800;
int durationS1mid = 1300;
int durationS1max = 1800;
int durationS2mid = 1100;

/* dla ATTiny 44 */
byte max_FS = 5; // podawane w sekundach

// LED 10
//  funkcja:  załączenie FAILSAFE po upływie w sekundach podanych w zmiennej max_FS
//  lub załączenie spodochronu ew. głośników typu "buzzer"
//  może być wykorzystany jako dodatkowy obwód do sterowania światłami do lądowania
byte LED_Failsafe = 7; // PIN 10 - LED 10

// LED 9
// funkcja: światło antykolilzyjne obrysowe BIAŁE
// tylna część statecznika pionowego lub ogonu kadłuba
// jeśli używane będzie jedno złącze, w drugie należy włożyć zworkę
byte LED_positionTail = 6; // PIN 9 - LED 9

// LED 7-8
// funkcja: załączenie oświetlenia podwozia
//  jeśli pobór mocy LED jest większy niż 1W, należy zastosować inny obwód 
//  lub sterować przełącznikiem załączającym oświetlenie
//  o załączeniu świateł, decyduje zmienna led_gear
byte LED_landingGear = 5; // PIN 8 - LED 7-8  PWM
boolean led_gear;

// LED 5-6
// funkcja: BEACON światło sygnalizujące pracę silnika, spód i góra kadłuba lub statecznika pionowego
//  zmienna led_beacon informuje czy zostały załączone silniki
byte LED_beacon = 4; // PIN 7 - LED 5-6  PWM
boolean led_beacon;

// LED 3-4
// funkcja: światła antykolizyjne BIAŁE stroboskopowe na obu skrzydłach skierowane w bok lub tył
byte LED_strobeWing = 3; // PIN 6 - LED 3-4  PWM

// LED 1-2
// funkcja:  światła obrysowe, ZIELONE I CZERWONE na skrzydłach, skierowane bok 
//  lub może być umieszczone na końcowej krawędzi skrzydeł w kierunku przód
byte LED_positionWing = 2; // PIN 5 - LED 1-2  PWM

// CONN 1, Wejście sygnału S1  -  wejście z odbiornika RC, przełącznik trójpozycyjny
// funkcja:  załączanie oświetlenia nawigacyjnego
//   0 - światła obrysowe
//   1 - światła wyłączone
//   2 - pełne światła nawigacyjne
byte input_Signal1 = 8; // PIN 11

// CONN 2, Wejście sygnału S2  -  wejście z odbiornika RC, przełącznik dwupozycyjny
// funkcja:  załączanie świateł do lądowania
//  zsynchronizowane z kanałem RC odpowiedzialnym za wypuszczanie podwozia
byte input_Signal2 = 10; // PIN 13

// CONN 3, Wejście sygnału S3  -  wejście z odbiornika RC, kanał THR
// funkcja:  załączanie BEACON z chwilą uruchamiania silnika
//  minimalna wartość THR PWM dla której BEACON jest nieaktywny należy wprowadzić w zmiennej inThr_Signal
byte input_Signal3 = 9; // PIN 12
int inTrh_Signal = 1100;

// CONN 4, Wejście sygnału S4
//  dodatkowe złącze We/Wy
byte input_Signal4 = 10; // PIN 2

// CONN 5, Wejście sygnału S5
//  dodatkowe złącze We/Wy
byte input_Signal5 = 9; // PIN 3

/* Stan PWM dla diod, więcej o PWM http://arduino.cc/en/Tutorial/PWM */
// wartość dla wyłączonej diody
const byte LEDOFF = 0;
// wartość wypełnienia PWM dla diody "przygaszonej"
const byte LEDON = 64; // 25%
// wartość wypełnienia PWM dla pełnego oświetlenia
const byte LEDBLINK = 244; 
const byte LEDGEAR = 192; 

/* pomocnicze */
byte input_Signal1State = 0;
boolean goArmingState = false;
boolean wait_state = true;
unsigned long durationS1;
unsigned long durationS2;
unsigned long durationS3;
int counterFS = 0;

// Ustawienia po uruchomieniu układu
void setup() {
  // ustawiamy stan IO, internal pull
  pinMode(LED_positionWing, OUTPUT);     
  pinMode(LED_strobeWing, OUTPUT);     
  pinMode(LED_beacon, OUTPUT);     
  pinMode(LED_landingGear, OUTPUT);     
  pinMode(LED_positionTail, OUTPUT);     
  pinMode(LED_Failsafe, OUTPUT);     
  pinMode(input_Signal1, INPUT); 
  pinMode(input_Signal2, INPUT); 
  pinMode(input_Signal3, INPUT); 
  pinMode(input_Signal4, INPUT); 
  pinMode(input_Signal5, INPUT); 
  digitalWrite(input_Signal1, LOW);  
  digitalWrite(input_Signal2, LOW);  
  digitalWrite(input_Signal3, LOW);  
  digitalWrite(input_Signal4, LOW);  
  digitalWrite(input_Signal5, LOW);  
  counterFS = 0;
  led_beacon = false; 
  led_gear = false;
  LEDS_Failsafe(); // domyślnie po uruchomieniu
}

/* Wyłączenie wszystkich świateł */
void LEDS_OFF() {
  analogWrite(LED_positionWing, LEDOFF);
  analogWrite(LED_strobeWing, LEDOFF);  
  digitalWrite(LED_beacon, LOW);
  analogWrite(LED_landingGear, LEDOFF);
  analogWrite(LED_positionTail, LEDOFF);
//  analogWrite(LED_Failsafe, LEDOFF);
}

/* Włączenie wszystkich świateł */
void LEDS_ON() {
  analogWrite(LED_positionWing, LEDBLINK);
  analogWrite(LED_strobeWing, LEDBLINK);  
  digitalWrite(LED_beacon, HIGH);
  analogWrite(LED_landingGear, LEDBLINK);
  analogWrite(LED_positionTail, LEDBLINK);
//  analogWrite(LED_Failsafe, LEDBLINK);
}

/* Miganie wszystkich świateł - brak sygnału z odbiornika */
void LEDS_Failsafe() {
  LEDS_ON();
  delay(50);
  LEDS_OFF();
  delay(40);
  LEDS_ON();
  delay(50);
  LEDS_OFF();
  delay(40);
  LEDS_ON();
  delay(50);
  LEDS_OFF();
}

/* Aktywacja wyłącznie świateł obrysowych - tylko pozycyjne */
void LEDS_Mode1() {
  analogWrite(LED_positionWing, LEDON);  
  analogWrite(LED_strobeWing, LEDOFF);  
  analogWrite(LED_beacon, LEDOFF); 
  digitalWrite(LED_positionTail, HIGH);  
  if (led_gear !=false) {
    analogWrite(LED_landingGear, LEDGEAR);
  } else {
    analogWrite(LED_landingGear, LEDOFF);
  }

  if (led_beacon !=false) {
    digitalWrite(LED_beacon, HIGH);
    delay(50);
    digitalWrite(LED_beacon, LOW);
    delay(50);
    digitalWrite(LED_beacon, HIGH);
    delay(50);
    digitalWrite(LED_beacon, LOW);
    delay(50);  
    digitalWrite(LED_beacon, HIGH);
    delay(50);
    digitalWrite(LED_beacon, LOW);
    delay(700);
  }
}

/* Aktywacja pełnego cyklu oświetlenia */
void LEDS_Mode2() {
  if (led_gear !=false) {
    analogWrite(LED_landingGear, LEDGEAR);
  } else {
    analogWrite(LED_landingGear, LEDOFF);
  }
  digitalWrite(LED_positionTail, HIGH);
  digitalWrite(LED_strobeWing, HIGH); 
  delay(50);
  digitalWrite(LED_strobeWing, LOW); 
  delay(50);
  analogWrite(LED_positionWing, LEDBLINK);
  digitalWrite(LED_strobeWing, HIGH); 
  delay(50);
  analogWrite(LED_positionWing, LEDOFF);
  digitalWrite(LED_strobeWing, LOW);
  digitalWrite(LED_positionTail, LOW);  
  delay(50);
  analogWrite(LED_positionWing, LEDBLINK);
  digitalWrite(LED_positionTail, HIGH);
  digitalWrite(LED_strobeWing, HIGH);
  delay(50);
  analogWrite(LED_positionWing, LEDOFF);
  digitalWrite(LED_positionTail, LOW);
  
  delay(50);
  analogWrite(LED_positionWing, LEDBLINK);
  digitalWrite(LED_positionTail, HIGH);digitalWrite(LED_strobeWing, LOW);
  delay(50);
  analogWrite(LED_positionWing, LEDON);
  digitalWrite(LED_positionTail, LOW);
  delay(50);
  // 400 ms
  if (led_beacon !=false) digitalWrite(LED_beacon, HIGH);
  digitalWrite(LED_positionTail, HIGH);
  delay(50);
  digitalWrite(LED_beacon, LOW);
  digitalWrite(LED_positionTail, LOW);
  delay(50);
  if (led_beacon !=false) digitalWrite(LED_beacon, HIGH);
  delay(50);
  digitalWrite(LED_beacon, LOW);
  delay(50);  
  if (led_beacon !=false) digitalWrite(LED_beacon, HIGH);
  delay(50);
  digitalWrite(LED_beacon, LOW);
  delay(350);
  // 1000 ms
}

/* w tej pętli, program wykonuje się w nieskończoność */
void loop() {
  // oczekiwanie na sygnał z odbiornika RC
  durationS1 = pulseIn(input_Signal1, HIGH);
  //counterFS = (durationS1 > 100) ? 0 : ++counterFS;
  if (durationS1 > 0) { counterFS = 0; analogWrite(LED_Failsafe, LEDOFF);} else { ++counterFS;}
  
  if ((durationS1 > durationS1min)and(durationS1 < (durationS1mid+1))) {
    // CONN-1, przełącznik w aparaturze na poz. 0
    //led_beacon = false;
    led_gear = false;
    LEDS_Mode1(); // przełącznik w aparaturze na poz. 1
  } else if ((durationS1 > durationS1mid )and(durationS1 < (durationS1max+1))){
    // CONN-1, przełącznik w aparaturze na poz. 1
    // włączone światła pozycyjne i stroboskopowe, światła do lądowania wg stanu przełącznika na złączy CONN-2
    led_gear = true;
    LEDS_Mode2(); 
  } else if (durationS1 > durationS1max ) {
    led_gear = false;
    LEDS_Mode2(); // przełącznik w aparaturze na poz. 2
  } else { // Failsafe
  // błyski stroboskopowe na wszystkich światłach na obwodach LED 1-10 gdy brak sygnału PWM z odbiornika RC   
    LEDS_Failsafe();  
  }  
  if (counterFS < 1) {
    // odczytujemy wartość PWM dla kanału sterowania podwoziem ze złącza CONN-2
    // załączenie świateł do lądowania obwód LED 9
    durationS2 = pulseIn(input_Signal2, HIGH);
    led_beacon = (durationS2 > durationS2mid) ? true : false;
  } else {
    if (counterFS > max_FS ) { // załączenie obwodu LED 10 - FAILSAFE(buzzer/LED/parachute)
      analogWrite(LED_Failsafe, LEDBLINK);
    }
  }
  
  /**/
}
/* a tu jest koniec kodu v2.0.2.8 */

