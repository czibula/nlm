/*
  Moduł NLM 1.4
  
  Oświetlenie modelu RC typu Cesna 1
  Program steruje układem diod 6-ciu LED 
  w oparciu o sygnał z aparatury RC
 
  Program przeznaczony dla Arduino, udostępniany jest na licencji OpenSource.
  @autor: warp3r[at]wp.pl
  @date 2014
  @version 1.4.2
  
  Copyright (c) 2014, Andrzej Donczew
  All rights reserved.
 */

/*
LED 1 - ZIELONY - PRAWE RAMIĘ/SKRZYDŁO - max LED3W
LED 2 - CZERWONY - LEWE RAMIĘ/SKRZYDŁO - max LED3W
LED 3 - BIAŁY - ŚWIATŁO LĄDOWANIA OBWÓD 1 - max LED1W
LED 4 - BIAŁY - ŚWIATŁO LĄDOWANIA OBWÓD 2 - max LED1W
LED 5 - CZERWONY - BEACON - można popdłączyć max 2x LED3W równolegle
LED 6 - BIAŁY - OGON/STATECZNIK PIONOWY - max LED3W
*/

/* dla ATTiny 45 */

// LED czerwone i zielone, stałe światło ew. z błyskami
// czerwone na lewe skrzydło, zielone na prawe
int led_Position = 4; // PIN 3 - LED 1-2

// LED białe błyskowe na skrzydłach
// skierowane do tyłu pod kątem 45st
int led_LandingLigths = 3; // PIN 2 - LED 3-4

// LED czerwony błyskowe
// spód i górna część kadłuba
int led_AntiCollision_Beacon = 1; // PIN 6 - LED 5

// LED białe błyskowe, może być ew. zapalane wraz z obrysowymi
// umieszczane w części ogonowej w kierunku świecenia do tyłu
int led_TailStrobe = 0; // PIN 5 - LED 6

// Wejście sygnału A7 z APM 2.6
// ew. zwierane z "+5V" z BEC/RC jeśli pełne oświetlenie ma być aktywowane podczas załączania 
int input_SignalArming = 2; // PIN 7

/* Stan diod więcej o PWM http://arduino.cc/en/Tutorial/PWM */
// wartość dla wyłączonej diody
const int LEDOFF = 0;
// wartość wypełnienia PWM dla diody "przygaszonej"
const int LEDON = 64;
// wartość wypełnienia PWM dla pełnego oświetlenia
const int LEDBLINK = 255;

/* pomocnicze */
int input_SignalArmingState = 0;
boolean goArmingState = false;
boolean wait_state = true;
unsigned long duration;

// Ustawienia po uruchomieniu układu
void setup() {
  // ustawiamy stan IO, internal pull
  pinMode(led_AntiCollision_Beacon, OUTPUT);     
  pinMode(led_LandingLigths, OUTPUT);     
  pinMode(led_TailStrobe, OUTPUT);     
  pinMode(led_Position, OUTPUT);     
  pinMode(input_SignalArming, INPUT); 
  digitalWrite(input_SignalArming, LOW);  
  LEDS_Failsafe(); // domyślnie po uruchomieniu
}


/* Aktywacja wyłącznie świateł obrysowych - pozycyjne - miganie; brak sygnału z odbiornika */
void LEDS_Failsafe() {
  analogWrite(led_LandingLigths, LEDBLINK);
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);  
  analogWrite(led_Position, LEDBLINK);
  analogWrite(led_TailStrobe, LEDBLINK);
  delay(50);
  analogWrite(led_LandingLigths, LEDOFF);
  analogWrite(led_Position, LEDOFF);
  analogWrite(led_TailStrobe, LEDOFF);  
  analogWrite(led_AntiCollision_Beacon, LEDOFF);  
  delay(40);
  analogWrite(led_LandingLigths, LEDBLINK);
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);  
  analogWrite(led_Position, LEDBLINK);
  analogWrite(led_TailStrobe, LEDBLINK);
  delay(50);
  analogWrite(led_LandingLigths, LEDOFF);
  analogWrite(led_Position, LEDOFF);
  analogWrite(led_TailStrobe, LEDOFF);  
  analogWrite(led_AntiCollision_Beacon, LEDOFF);  
  delay(40);
  analogWrite(led_LandingLigths, LEDBLINK);
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);  
  analogWrite(led_Position, LEDBLINK);
  analogWrite(led_TailStrobe, LEDBLINK);
  delay(50);
  analogWrite(led_LandingLigths, LEDOFF);
  analogWrite(led_Position, LEDOFF);
  analogWrite(led_TailStrobe, LEDOFF);  
  analogWrite(led_AntiCollision_Beacon, LEDOFF);  

}

/* Aktywacja wyłącznie świateł obrysowych - tylko pozycyjne */
void LEDS_Mode1() {
  analogWrite(led_AntiCollision_Beacon, LEDOFF);  
  analogWrite(led_TailStrobe, LEDON);
  analogWrite(led_LandingLigths, LEDOFF);
  analogWrite(led_Position, LEDON);
}

/* Aktywacja pełnego cyklu oświetlenia */
void LEDS_Mode2() {
  analogWrite(led_TailStrobe, LEDBLINK); 
  delay(50);
  analogWrite(led_TailStrobe, LEDON); 
  delay(150);
  analogWrite(led_Position, LEDBLINK);
  delay(50);
  analogWrite(led_Position, LEDOFF);
  delay(50);
  analogWrite(led_Position, LEDBLINK);
  delay(50);
  analogWrite(led_Position, LEDON);
  delay(50);
  // 400 ms
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);
  delay(50);
  analogWrite(led_AntiCollision_Beacon, LEDOFF);
  delay(50);
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);
  delay(50);
  analogWrite(led_AntiCollision_Beacon, LEDOFF);
  delay(50);  
  analogWrite(led_AntiCollision_Beacon, LEDBLINK);
  delay(50);
  analogWrite(led_AntiCollision_Beacon, LEDOFF);
  delay(350);
  // 1000 ms
}

/* w tej pętli, program wykonuje się w nieskończoność */
void loop() {
  // oczekiwanie na sygnał z odbiornika RC
  duration = pulseIn(input_SignalArming, HIGH);
  if ((duration >900)and(duration < 1301)) {
    LEDS_Mode1(); // jest sygnał z aparatury w odbiorniku RC, przełącznik poz.0
  } else if ((duration >1300)and(duration < 1701)){
    analogWrite(led_LandingLigths, LEDOFF);
    LEDS_Mode2(); // przełącznik w aparaturze na poz. 1
  } else if (duration >1700) {
    analogWrite(led_LandingLigths, LEDBLINK);
    LEDS_Mode2(); // przełącznik w aparaturze na poz. 2
  } else {    
    LEDS_Failsafe(); // gdy brak sygnału PWM z odbiornika RC
  }  
  /**/
}
/* a tu jest koniec kodu v1.4.2 Cesna 1 */

